/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/calculations/air-density-calculations.js":
/*!******************************************************!*\
  !*** ./src/calculations/air-density-calculations.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateAirDensity: () => (/* binding */ calculateAirDensity),\n/* harmony export */   calculateAirDensityEffects: () => (/* binding */ calculateAirDensityEffects),\n/* harmony export */   calculateDewPoint: () => (/* binding */ calculateDewPoint),\n/* harmony export */   calculateVaporPressure: () => (/* binding */ calculateVaporPressure)\n/* harmony export */ });\n/**\n * Calculate air density based on temperature and pressure\n * @param {number} temperature - Temperature in Fahrenheit\n * @param {number} pressure - Pressure in inHg\n * @returns {number} Air density in kg/m^3\n */\nfunction calculateAirDensity(temperature, pressure) {\n  if (typeof temperature !== 'number' || isNaN(temperature)) {\n    throw new Error('Temperature must be a valid number');\n  }\n  if (typeof pressure !== 'number' || isNaN(pressure)) {\n    throw new Error('Pressure must be a valid number');\n  }\n\n  // Convert temperature to Kelvin\n  var tempK = (temperature + 459.67) * 5 / 9;\n\n  // Calculate air density using the ideal gas law\n  var density = pressure * 0.0338639 / (tempK * 0.287042);\n  return Math.round(density * 1000) / 1000; // Round to 3 decimal places\n}\n\n/**\n * Calculate dew point based on temperature and humidity\n * @param {number} temperature - Temperature in Fahrenheit\n * @param {number} humidity - Relative humidity in percentage\n * @returns {number} Dew point in Fahrenheit\n */\nfunction calculateDewPoint(temperature, humidity) {\n  if (typeof temperature !== 'number' || isNaN(temperature)) {\n    throw new Error('Temperature must be a valid number');\n  }\n  if (typeof humidity !== 'number' || isNaN(humidity) || humidity < 0 || humidity > 100) {\n    throw new Error('Humidity must be a valid percentage between 0 and 100');\n  }\n  var a = 17.27;\n  var b = 237.7;\n  var alpha = a * temperature / (b + temperature) + Math.log(humidity / 100);\n  var dewPoint = b * alpha / (a - alpha);\n  return Math.round(dewPoint * 100) / 100; // Round to 2 decimal places\n}\n\n/**\n * Calculate vapor pressure based on temperature\n * @param {number} temperature - Temperature in Fahrenheit\n * @returns {number} Vapor pressure in inHg\n */\nfunction calculateVaporPressure(temperature) {\n  if (typeof temperature !== 'number' || isNaN(temperature)) {\n    throw new Error('Temperature must be a valid number');\n  }\n  var vaporPressure = 0.61078 * Math.exp(17.27 * temperature / (temperature + 237.3));\n  return Math.round(vaporPressure * 1000) / 1000; // Round to 3 decimal places\n}\n\n/**\n * Calculate air density effects based on temperature, pressure, humidity, and altitude\n * @param {number} temperature - Temperature in Fahrenheit\n * @param {number} pressure - Pressure in inHg\n * @param {number} humidity - Relative humidity in percentage\n * @param {number} altitude - Altitude in feet\n * @returns {Object} Air density effects\n */\nfunction calculateAirDensityEffects(temperature, pressure, humidity, altitude) {\n  var airDensity = calculateAirDensity(temperature, pressure);\n  var dewPoint = calculateDewPoint(temperature, humidity);\n  var vaporPressure = calculateVaporPressure(temperature);\n  return {\n    airDensity: airDensity,\n    dewPoint: dewPoint,\n    vaporPressure: vaporPressure,\n    altitude: altitude\n  };\n}\n\n//# sourceURL=webpack://golf-yardage-calculator/./src/calculations/air-density-calculations.js?");

/***/ }),

/***/ "./src/calculations/core-calculations.js":
/*!***********************************************!*\
  !*** ./src/calculations/core-calculations.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateAirDensityRatio: () => (/* binding */ calculateAirDensityRatio),\n/* harmony export */   calculateAltitudeEffect: () => (/* binding */ calculateAltitudeEffect),\n/* harmony export */   calculateWindEffect: () => (/* binding */ calculateWindEffect)\n/* harmony export */ });\n/**\r\n * Core calculation functions module containing all physics and adjustment calculations\r\n * @module core-calculations\r\n */\n\n/**\r\n * Calculate wind effect on shot distance and direction\r\n * @param {number} windSpeed - Wind speed in mph\r\n * @param {string} windDirection - Wind direction (N, S, E, W, NE, etc.)\r\n * @param {string} shotHeight - Shot trajectory height (low, medium, high)\r\n * @returns {Object} Distance and lateral effects\r\n */\nfunction calculateWindEffect(windSpeed, windDirection) {\n  var shotHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'medium';\n  // Input validation\n  if (typeof windSpeed !== 'number' || isNaN(windSpeed)) {\n    throw new Error('Shot distance must be a valid number');\n  }\n\n  // Height-specific adjustments\n  var heightMultipliers = {\n    'low': 0.65,\n    'medium': 1.0,\n    'high': 1.35\n  };\n\n  // Convert wind speed to number\n  var speed = Number(windSpeed);\n\n  // Get wind angle and calculate components\n  var angle = calculateWindAngle(windDirection);\n  var headwindComponent = Math.cos(angle * Math.PI / 180) * speed;\n  var crosswindComponent = Math.sin(angle * Math.PI / 180) * speed;\n\n  // Calculate base effects\n  var baseWindEffect = -0.0065; // Negative for headwind effect\n  var crosswindFactor = 0.0045;\n  var heightMultiplier = heightMultipliers[shotHeight] || 1.0;\n\n  // Calculate final effects\n  var distanceEffect = headwindComponent * baseWindEffect * heightMultiplier;\n  var lateralEffect = crosswindComponent * crosswindFactor * heightMultiplier;\n  return {\n    distanceEffect: distanceEffect,\n    lateralEffect: lateralEffect\n  };\n}\n\n/**\r\n * Calculate altitude effect on shot distance\r\n * @param {number} altitude - Altitude in feet\r\n * @returns {number} Altitude effect (multiplier)\r\n */\nfunction calculateAltitudeEffect() {\n  var altitude = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  if (altitude < 0) {\n    throw new Error('Altitude must be non-negative');\n  }\n\n  // Convert to number and handle invalid input\n  var alt = Number(altitude);\n  if (isNaN(alt)) {\n    return 1.0;\n  }\n\n  // Base effect: 2.2% per 1000ft\n  var baseEffect = alt / 1000 * 0.022;\n\n  // Progressive effect for higher altitudes\n  var progressiveEffect = 0;\n  if (alt > 5000) {\n    progressiveEffect = (alt - 5000) / 1000 * 0.001;\n  }\n  return 1 + baseEffect + progressiveEffect;\n}\n\n/**\r\n * Calculate air density ratio compared to sea level\r\n * @param {Object} conditions - Weather conditions\r\n * @returns {number} Air density ratio\r\n */\nfunction calculateAirDensityRatio(conditions) {\n  var standardTemp = 59;\n  var standardPressure = 29.92;\n  var standardHumidity = 50;\n  var tempRankine = (conditions.temp || standardTemp) + 459.67;\n  var standardTempRankine = standardTemp + 459.67;\n  var pressureRatio = Math.pow((conditions.pressure || standardPressure) / standardPressure, 0.45);\n  var temperatureRatio = Math.pow(standardTempRankine / tempRankine, 0.5);\n  var humidity = conditions.humidity || standardHumidity;\n  var humidityFactor = 1 - (humidity - standardHumidity) / 100 * 0.008;\n  var densityRatio = pressureRatio * temperatureRatio * humidityFactor;\n  return Math.round(densityRatio * 1000) / 1000;\n}\n\n/**\r\n * Helper function to calculate wind angle\r\n * @param {string} windDirection - Wind direction (N, S, E, W, NE, etc.)\r\n * @returns {number} Wind angle in degrees\r\n */\nfunction calculateWindAngle(windDirection) {\n  var directions = {\n    'N': 0,\n    'NNE': 22.5,\n    'NE': 45,\n    'ENE': 67.5,\n    'E': 90,\n    'ESE': 112.5,\n    'SE': 135,\n    'SSE': 157.5,\n    'S': 180,\n    'SSW': 202.5,\n    'SW': 225,\n    'WSW': 247.5,\n    'W': 270,\n    'WNW': 292.5,\n    'NW': 315,\n    'NNW': 337.5\n  };\n  return directions[windDirection] || 0;\n}\n\n//# sourceURL=webpack://golf-yardage-calculator/./src/calculations/core-calculations.js?");

/***/ }),

/***/ "./src/calculations/wind-calculations.js":
/*!***********************************************!*\
  !*** ./src/calculations/wind-calculations.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateEffectiveWindSpeed: () => (/* binding */ calculateEffectiveWindSpeed),\n/* harmony export */   calculateWindAngle: () => (/* binding */ calculateWindAngle),\n/* harmony export */   calculateWindEffect: () => (/* binding */ calculateWindEffect)\n/* harmony export */ });\n/**\n * Calculate wind effect on shot distance and direction\n * @param {number} windSpeed - Wind speed in mph\n * @param {number} windDirection - Wind direction in degrees\n * @param {number} shotDistance - Shot distance in yards\n * @param {number} shotHeight - Maximum shot height in yards\n * @returns {Object} Distance and lateral effects\n */\nfunction calculateWindEffect(windSpeed, windDirection, shotDistance, shotHeight) {\n  // Input validation\n  if (typeof windSpeed !== 'number' || isNaN(windSpeed)) {\n    throw new Error('Wind speed must be a valid number');\n  }\n  if (windSpeed < 0) {\n    throw new Error('Wind speed must be non-negative');\n  }\n  if (typeof windDirection !== 'number' || isNaN(windDirection)) {\n    throw new Error('Wind direction must be a valid number');\n  }\n  if (windDirection < 0 || windDirection > 360) {\n    throw new Error('Wind direction must be between 0 and 360 degrees');\n  }\n  if (typeof shotDistance !== 'number' || isNaN(shotDistance)) {\n    throw new Error('Shot distance must be a valid number');\n  }\n  if (shotDistance <= 0) {\n    throw new Error('Shot distance must be positive');\n  }\n  if (typeof shotHeight !== 'number' || isNaN(shotHeight)) {\n    throw new Error('Shot height must be a valid number');\n  }\n  if (shotHeight < 0) {\n    throw new Error('Shot height must be non-negative');\n  }\n\n  // Calculate wind components\n  var radians = windDirection * Math.PI / 180;\n  var headwind = windSpeed * Math.cos(radians);\n  var crosswind = windSpeed * Math.sin(radians);\n\n  // Height factor affects wind impact\n  var heightFactor = Math.min(1.5, Math.max(0.5, shotHeight / 30));\n\n  // Calculate effects with adjusted coefficients\n  var distance = -headwind * 0.009 * heightFactor; // Negative for headwind effect\n  var lateral = -crosswind * 0.008 * heightFactor; // Negative for leftward movement\n\n  // Handle zero cases\n  if (Math.abs(distance) < 1e-10) distance = 0;\n  if (Math.abs(lateral) < 1e-10) lateral = 0;\n  return {\n    distance: distance,\n    lateral: lateral\n  };\n}\n\n/**\n * Convert wind direction string to angle\n * @param {string} direction - Wind direction (N, S, E, W, NE, etc.)\n * @returns {number} Angle in degrees\n */\nfunction calculateWindAngle(direction) {\n  if (!direction || typeof direction !== 'string') {\n    return 0;\n  }\n  var directions = {\n    'N': 0,\n    'NNE': 22.5,\n    'NE': 45,\n    'ENE': 67.5,\n    'E': 90,\n    'ESE': 112.5,\n    'SE': 135,\n    'SSE': 157.5,\n    'S': 180,\n    'SSW': 202.5,\n    'SW': 225,\n    'WSW': 247.5,\n    'W': 270,\n    'WNW': 292.5,\n    'NW': 315,\n    'NNW': 337.5\n  };\n  return directions[direction.toUpperCase()] || 0;\n}\n\n/**\n * Calculate effective wind speed at altitude\n * @param {number} windSpeed - Wind speed in mph\n * @param {number} altitude - Altitude in feet\n * @returns {number} Effective wind speed\n */\nfunction calculateEffectiveWindSpeed(windSpeed, altitude) {\n  // Convert inputs to numbers\n  var speed = Number(windSpeed);\n  var alt = Number(altitude) || 0;\n\n  // Handle invalid inputs\n  if (isNaN(speed)) {\n    return 0;\n  }\n\n  // Handle negative wind speeds\n  var absSpeed = Math.abs(speed);\n\n  // Calculate altitude factor\n  var altitudeFactor = 1 + Math.min(20000, Math.max(0, alt)) / 66667;\n\n  // Calculate effective speed with altitude adjustment\n  var effectiveSpeed = absSpeed * altitudeFactor;\n\n  // Apply additional factor for negative altitudes\n  if (alt < 0) {\n    effectiveSpeed *= 1.015;\n  }\n\n  // Round to 2 decimal places\n  return Math.round(effectiveSpeed * 100) / 100;\n}\n\n//# sourceURL=webpack://golf-yardage-calculator/./src/calculations/wind-calculations.js?");

/***/ }),

/***/ "./src/wind.js":
/*!*********************!*\
  !*** ./src/wind.js ***!
  \*********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _calculations_wind_calculations_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculations/wind-calculations.js */ \"./src/calculations/wind-calculations.js\");\n/* harmony import */ var _calculations_air_density_calculations_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calculations/air-density-calculations.js */ \"./src/calculations/air-density-calculations.js\");\n/* harmony import */ var _calculations_core_calculations_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculations/core-calculations.js */ \"./src/calculations/core-calculations.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// Wind calculation and UI handling\n\n\n\nvar WindCalculator = /*#__PURE__*/function () {\n  function WindCalculator() {\n    _classCallCheck(this, WindCalculator);\n    console.log('Initializing WindCalculator...');\n    this.initializeElements();\n    this.setupChart();\n    this.setupEventListeners();\n    this.fetchWeatherData();\n  }\n  return _createClass(WindCalculator, [{\n    key: \"initializeElements\",\n    value: function initializeElements() {\n      console.log('Initializing elements...');\n      // Input elements\n      this.windSpeedInput = document.getElementById('wind-speed');\n      this.windAngleInput = document.getElementById('wind-angle');\n      this.shotDistanceInput = document.getElementById('shot-distance');\n      this.shotHeightInput = document.getElementById('shot-height');\n      this.shotDirectionInput = document.getElementById('shot-direction');\n\n      // Display elements\n      this.windSpeedDisplay = document.getElementById('current-wind-speed');\n      this.windDirectionDisplay = document.getElementById('current-wind-direction');\n      this.lastUpdatedDisplay = document.getElementById('last-updated');\n      this.adjustedDistanceDisplay = document.getElementById('adjusted-distance');\n      this.distanceEffectDisplay = document.getElementById('distance-effect');\n      this.tempEffectDisplay = document.getElementById('temp-effect');\n      this.lateralEffectDisplay = document.getElementById('lateral-effect');\n\n      // Canvas element\n      this.canvas = document.getElementById('shot-chart');\n      if (!this.canvas) {\n        console.error('Shot chart canvas not found');\n        return;\n      }\n      this.ctx = this.canvas.getContext('2d');\n\n      // Log element states\n      console.log('Elements initialized:', {\n        windSpeedInput: !!this.windSpeedInput,\n        windAngleInput: !!this.windAngleInput,\n        shotDistanceInput: !!this.shotDistanceInput,\n        shotHeightInput: !!this.shotHeightInput,\n        shotDirectionInput: !!this.shotDirectionInput,\n        canvas: !!this.canvas\n      });\n    }\n  }, {\n    key: \"setupChart\",\n    value: function setupChart() {\n      if (!this.ctx) {\n        console.error('Chart context not available');\n        return;\n      }\n\n      // Set canvas size\n      this.canvas.width = 400;\n      this.canvas.height = 400;\n\n      // Initial draw\n      this.drawChart();\n    }\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this = this;\n      console.log('Setting up event listeners...');\n      // Add input event listeners\n      var inputs = [this.windSpeedInput, this.windAngleInput, this.shotDistanceInput, this.shotHeightInput, this.shotDirectionInput];\n      inputs.forEach(function (input, index) {\n        if (input) {\n          input.addEventListener('input', function () {\n            console.log(\"Input changed: \".concat(input.id));\n            _this.handleWindChange();\n          });\n        } else {\n          console.error(\"Input element at index \".concat(index, \" not found\"));\n        }\n      });\n\n      // Add refresh button listener\n      var refreshButton = document.getElementById('refresh-weather');\n      if (refreshButton) {\n        refreshButton.addEventListener('click', function () {\n          console.log('Refresh button clicked');\n          _this.fetchWeatherData();\n        });\n      } else {\n        console.error('Refresh button not found');\n      }\n    }\n  }, {\n    key: \"drawChart\",\n    value: function drawChart() {\n      if (!this.ctx) return;\n\n      // Clear canvas\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // Draw compass circle\n      this.ctx.beginPath();\n      this.ctx.arc(200, 200, 180, 0, 2 * Math.PI);\n      this.ctx.strokeStyle = '#ccc';\n      this.ctx.stroke();\n\n      // Draw compass points\n      this.drawCompassPoint('N', 200, 20);\n      this.drawCompassPoint('E', 380, 200);\n      this.drawCompassPoint('S', 200, 380);\n      this.drawCompassPoint('W', 20, 200);\n\n      // Draw wind vector if we have data\n      if (this.windSpeedInput && this.windAngleInput) {\n        var windSpeed = parseFloat(this.windSpeedInput.value) || 0;\n        var windAngle = parseFloat(this.windAngleInput.value) || 0;\n        this.drawWindVector(windSpeed, windAngle);\n      }\n\n      // Draw shot vector if we have data\n      if (this.shotDistanceInput && this.shotDirectionInput) {\n        var shotDistance = parseFloat(this.shotDistanceInput.value) || 0;\n        var shotDirection = parseFloat(this.shotDirectionInput.value) || 0;\n        this.drawShotVector(shotDistance, shotDirection);\n      }\n    }\n  }, {\n    key: \"drawCompassPoint\",\n    value: function drawCompassPoint(label, x, y) {\n      if (!this.ctx) return;\n      this.ctx.font = '14px Arial';\n      this.ctx.fillStyle = '#666';\n      this.ctx.textAlign = 'center';\n      this.ctx.textBaseline = 'middle';\n      this.ctx.fillText(label, x, y);\n    }\n  }, {\n    key: \"drawWindVector\",\n    value: function drawWindVector(speed, angle) {\n      if (!this.ctx) return;\n      console.log('Drawing wind vector:', {\n        speed: speed,\n        angle: angle\n      });\n      var radians = (angle - 90) * (Math.PI / 180);\n      var length = Math.min(speed * 5, 150);\n      var startX = 200;\n      var startY = 200;\n      var endX = startX + length * Math.cos(radians);\n      var endY = startY + length * Math.sin(radians);\n\n      // Draw arrow line\n      this.ctx.beginPath();\n      this.ctx.moveTo(startX, startY);\n      this.ctx.lineTo(endX, endY);\n      this.ctx.strokeStyle = 'blue';\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n\n      // Draw arrow head\n      var headLength = 10;\n      var angle1 = radians - Math.PI / 6;\n      var angle2 = radians + Math.PI / 6;\n      this.ctx.beginPath();\n      this.ctx.moveTo(endX, endY);\n      this.ctx.lineTo(endX - headLength * Math.cos(angle1), endY - headLength * Math.sin(angle1));\n      this.ctx.moveTo(endX, endY);\n      this.ctx.lineTo(endX - headLength * Math.cos(angle2), endY - headLength * Math.sin(angle2));\n      this.ctx.stroke();\n    }\n  }, {\n    key: \"drawShotVector\",\n    value: function drawShotVector(distance, direction) {\n      if (!this.ctx) return;\n      console.log('Drawing shot vector:', {\n        distance: distance,\n        direction: direction\n      });\n      var radians = (direction - 90) * (Math.PI / 180);\n      var length = Math.min(distance / 2, 150);\n      var startX = 200;\n      var startY = 200;\n      var endX = startX + length * Math.cos(radians);\n      var endY = startY + length * Math.sin(radians);\n\n      // Draw arrow line\n      this.ctx.beginPath();\n      this.ctx.moveTo(startX, startY);\n      this.ctx.lineTo(endX, endY);\n      this.ctx.strokeStyle = 'red';\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n\n      // Draw arrow head\n      var headLength = 10;\n      var angle1 = radians - Math.PI / 6;\n      var angle2 = radians + Math.PI / 6;\n      this.ctx.beginPath();\n      this.ctx.moveTo(endX, endY);\n      this.ctx.lineTo(endX - headLength * Math.cos(angle1), endY - headLength * Math.sin(angle1));\n      this.ctx.moveTo(endX, endY);\n      this.ctx.lineTo(endX - headLength * Math.cos(angle2), endY - headLength * Math.sin(angle2));\n      this.ctx.stroke();\n    }\n  }, {\n    key: \"updateShotPath\",\n    value: function updateShotPath() {\n      var _this$windSpeedInput, _this$windAngleInput, _this$shotDistanceInp, _this$shotHeightInput, _this$shotDirectionIn, _weatherData$values, _weatherData$values2, _weatherData$values3, _weatherData$values4;\n      console.log('Updating shot path...');\n      if (!this.ctx) {\n        console.error('Chart not initialized');\n        return;\n      }\n\n      // Get input values\n      var windSpeed = parseFloat((_this$windSpeedInput = this.windSpeedInput) === null || _this$windSpeedInput === void 0 ? void 0 : _this$windSpeedInput.value) || 0;\n      var windDirection = parseFloat((_this$windAngleInput = this.windAngleInput) === null || _this$windAngleInput === void 0 ? void 0 : _this$windAngleInput.value) || 0;\n      var shotDistance = parseFloat((_this$shotDistanceInp = this.shotDistanceInput) === null || _this$shotDistanceInp === void 0 ? void 0 : _this$shotDistanceInp.value) || 0;\n      var shotHeight = parseFloat((_this$shotHeightInput = this.shotHeightInput) === null || _this$shotHeightInput === void 0 ? void 0 : _this$shotHeightInput.value) || 0;\n      var shotDirection = parseFloat((_this$shotDirectionIn = this.shotDirectionInput) === null || _this$shotDirectionIn === void 0 ? void 0 : _this$shotDirectionIn.value) || 0;\n      console.log('Input values:', {\n        windSpeed: windSpeed,\n        windDirection: windDirection,\n        shotDistance: shotDistance,\n        shotHeight: shotHeight,\n        shotDirection: shotDirection\n      });\n\n      // Get weather data from cache if available\n      var weatherData = this.getCachedWeather();\n      var temperature = (weatherData === null || weatherData === void 0 || (_weatherData$values = weatherData.values) === null || _weatherData$values === void 0 ? void 0 : _weatherData$values.temperature) || 70;\n      var pressure = (weatherData === null || weatherData === void 0 || (_weatherData$values2 = weatherData.values) === null || _weatherData$values2 === void 0 ? void 0 : _weatherData$values2.pressureSeaLevel) || 29.92;\n      var humidity = (weatherData === null || weatherData === void 0 || (_weatherData$values3 = weatherData.values) === null || _weatherData$values3 === void 0 ? void 0 : _weatherData$values3.humidity) || 0;\n      var altitude = (weatherData === null || weatherData === void 0 || (_weatherData$values4 = weatherData.values) === null || _weatherData$values4 === void 0 ? void 0 : _weatherData$values4.altitude) || 0;\n\n      // Calculate wind effects\n      var windEffects = (0,_calculations_wind_calculations_js__WEBPACK_IMPORTED_MODULE_0__.calculateWindEffect)(windSpeed, windDirection, shotDistance, shotHeight);\n\n      // Calculate air density effects\n      var airDensity = (0,_calculations_air_density_calculations_js__WEBPACK_IMPORTED_MODULE_1__.calculateAirDensity)(temperature, pressure, humidity);\n\n      // Calculate altitude effects\n      var altitudeEffects = (0,_calculations_core_calculations_js__WEBPACK_IMPORTED_MODULE_2__.calculateAltitudeEffect)(altitude);\n\n      // Calculate total effects\n      var windDistanceEffect = windEffects.distance * shotDistance;\n      var lateralEffect = windEffects.lateral * shotDistance;\n      var airDensityEffect = (airDensity - 1) * shotDistance;\n      var altitudeEffect = (altitudeEffects.total - 1) * shotDistance;\n\n      // Calculate final adjusted distance\n      var adjustedDistance = Math.round(shotDistance + windDistanceEffect + airDensityEffect + altitudeEffect);\n\n      // Update displays\n      if (this.adjustedDistanceDisplay) {\n        this.adjustedDistanceDisplay.textContent = \"\".concat(adjustedDistance, \" yards\");\n      }\n      if (this.distanceEffectDisplay) {\n        this.distanceEffectDisplay.textContent = \"\".concat(Math.round(windDistanceEffect), \" yards\");\n      }\n      if (this.tempEffectDisplay) {\n        this.tempEffectDisplay.textContent = \"\".concat(Math.round(airDensityEffect + altitudeEffect), \" yards\");\n      }\n      if (this.lateralEffectDisplay) {\n        var lateralEffectText = lateralEffect > 0 ? 'right' : 'left';\n        this.lateralEffectDisplay.textContent = \"\".concat(Math.round(lateralEffect), \" yards \").concat(lateralEffectText);\n      }\n\n      // Redraw chart\n      this.drawChart();\n    }\n  }, {\n    key: \"fetchWeatherData\",\n    value: function () {\n      var _fetchWeatherData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var cachedData, weatherData, now, isExpired, _data, position, _position$coords, latitude, longitude, url, response, data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              console.log('Fetching weather data...');\n              // Check for cached weather data first\n              cachedData = localStorage.getItem('weatherData');\n              if (!cachedData) {\n                _context.next = 18;\n                break;\n              }\n              weatherData = JSON.parse(cachedData);\n              now = new Date().getTime();\n              isExpired = now - weatherData.timestamp > weatherData.expiresIn;\n              if (isExpired) {\n                _context.next = 18;\n                break;\n              }\n              console.log('Using cached weather data for wind calculations');\n              _data = weatherData.data; // Update UI with weather data\n              if (this.windSpeedInput) this.windSpeedInput.value = Math.round(_data.values.windSpeed);\n              if (this.windAngleInput) this.windAngleInput.value = _data.values.windDirection;\n              if (this.windSpeedDisplay) this.windSpeedDisplay.textContent = \"\".concat(Math.round(_data.values.windSpeed), \" mph\");\n              if (this.windDirectionDisplay) this.windDirectionDisplay.textContent = this.getDirectionLabel(_data.values.windDirection);\n              if (this.lastUpdatedDisplay) this.lastUpdatedDisplay.textContent = \"Updated: \".concat(new Date(weatherData.timestamp).toLocaleTimeString());\n\n              // Store temperature for later use\n              this.currentTemperature = _data.values.temperature;\n\n              // Update calculations\n              this.handleWindChange();\n              return _context.abrupt(\"return\");\n            case 18:\n              _context.next = 20;\n              return new Promise(function (resolve, reject) {\n                navigator.geolocation.getCurrentPosition(resolve, reject);\n              });\n            case 20:\n              position = _context.sent;\n              _position$coords = position.coords, latitude = _position$coords.latitude, longitude = _position$coords.longitude;\n              url = \"https://api.tomorrow.io/v4/weather/realtime?location=\".concat(latitude, \",\").concat(longitude, \"&units=imperial&apikey=jG9onLuVeiR4NWlVIO85EWWLCtQ2Uzqv\");\n              _context.next = 25;\n              return fetch(url);\n            case 25:\n              response = _context.sent;\n              if (response.ok) {\n                _context.next = 28;\n                break;\n              }\n              throw new Error('Weather data fetch failed');\n            case 28:\n              _context.next = 30;\n              return response.json();\n            case 30:\n              data = _context.sent;\n              console.log('Weather data fetched:', data);\n\n              // Update UI with weather data\n              if (this.windSpeedInput) this.windSpeedInput.value = Math.round(data.data.values.windSpeed);\n              if (this.windAngleInput) this.windAngleInput.value = data.data.values.windDirection;\n              if (this.windSpeedDisplay) this.windSpeedDisplay.textContent = \"\".concat(Math.round(data.data.values.windSpeed), \" mph\");\n              if (this.windDirectionDisplay) this.windDirectionDisplay.textContent = this.getDirectionLabel(data.data.values.windDirection);\n              if (this.lastUpdatedDisplay) this.lastUpdatedDisplay.textContent = \"Updated: \".concat(new Date().toLocaleTimeString());\n\n              // Store temperature for later use\n              this.currentTemperature = data.data.values.temperature;\n\n              // Update calculations\n              this.handleWindChange();\n              _context.next = 45;\n              break;\n            case 41:\n              _context.prev = 41;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching weather data:', _context.t0);\n              this.updateWithMockData();\n            case 45:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 41]]);\n      }));\n      function fetchWeatherData() {\n        return _fetchWeatherData.apply(this, arguments);\n      }\n      return fetchWeatherData;\n    }()\n  }, {\n    key: \"updateWithMockData\",\n    value: function updateWithMockData() {\n      console.log('Using mock data...');\n      // Mock data for testing\n      var mockWindSpeed = 10;\n      var mockWindDirection = 45;\n      this.currentTemperature = 70; // Default temperature\n\n      if (this.windSpeedInput) this.windSpeedInput.value = mockWindSpeed;\n      if (this.windAngleInput) this.windAngleInput.value = mockWindDirection;\n      if (this.windSpeedDisplay) this.windSpeedDisplay.textContent = \"\".concat(mockWindSpeed, \" mph\");\n      if (this.windDirectionDisplay) this.windDirectionDisplay.textContent = this.getDirectionLabel(mockWindDirection);\n      if (this.lastUpdatedDisplay) this.lastUpdatedDisplay.textContent = 'Using mock data';\n\n      // Update calculations with mock data\n      this.handleWindChange();\n    }\n  }, {\n    key: \"getCachedWeather\",\n    value: function getCachedWeather() {\n      try {\n        var cachedData = localStorage.getItem('weatherData');\n        if (!cachedData) {\n          console.log('No cached weather data found');\n          return null;\n        }\n        var _JSON$parse = JSON.parse(cachedData),\n          data = _JSON$parse.data,\n          timestamp = _JSON$parse.timestamp;\n        var cacheAge = Date.now() - timestamp;\n        var cacheTimeout = 30 * 60 * 1000; // 30 minutes\n\n        if (cacheAge >= cacheTimeout) {\n          console.log('Weather cache expired:', {\n            cacheAge: Math.round(cacheAge / 1000 / 60) + ' minutes',\n            timeout: Math.round(cacheTimeout / 1000 / 60) + ' minutes'\n          });\n          localStorage.removeItem('weatherData');\n          return null;\n        }\n        console.log('Using cached weather data:', {\n          data: data,\n          cacheAge: Math.round(cacheAge / 1000 / 60) + ' minutes',\n          expiresIn: Math.round((cacheTimeout - cacheAge) / 1000 / 60) + ' minutes'\n        });\n        return data;\n      } catch (error) {\n        console.error('Error reading weather cache:', error);\n        localStorage.removeItem('weatherData');\n        return null;\n      }\n    }\n  }, {\n    key: \"getDirectionLabel\",\n    value: function getDirectionLabel(degrees) {\n      var directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];\n      var index = Math.round(degrees / 22.5) % 16;\n      return directions[index];\n    }\n  }, {\n    key: \"handleWindChange\",\n    value: function handleWindChange() {\n      console.log('Wind changed, updating shot path...');\n      this.updateShotPath();\n    }\n  }]);\n}(); // Initialize the calculator when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('DOM loaded, initializing WindCalculator...');\n  new WindCalculator();\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WindCalculator);\n\n//# sourceURL=webpack://golf-yardage-calculator/./src/wind.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/wind.js");
/******/ 	
/******/ })()
;