/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/calculations/air-density-calculations.js":
/*!******************************************************!*\
  !*** ./src/calculations/air-density-calculations.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateAirDensity: () => (/* binding */ calculateAirDensity),\n/* harmony export */   calculateAirDensityEffects: () => (/* binding */ calculateAirDensityEffects),\n/* harmony export */   calculateDewPoint: () => (/* binding */ calculateDewPoint),\n/* harmony export */   calculateVaporPressure: () => (/* binding */ calculateVaporPressure)\n/* harmony export */ });\n/**\n * Calculate air density based on temperature and pressure\n * @param {number} temperature - Temperature in Fahrenheit\n * @param {number} pressure - Pressure in inHg\n * @returns {number} Air density in kg/m^3\n */\nfunction calculateAirDensity(temperature, pressure) {\n  if (typeof temperature !== 'number' || isNaN(temperature)) {\n    throw new Error('Temperature must be a valid number');\n  }\n  if (typeof pressure !== 'number' || isNaN(pressure)) {\n    throw new Error('Pressure must be a valid number');\n  }\n\n  // Convert temperature to Kelvin\n  var tempK = (temperature + 459.67) * 5 / 9;\n\n  // Calculate air density using the ideal gas law\n  var density = pressure * 0.0338639 / (tempK * 0.287042);\n  return Math.round(density * 1000) / 1000; // Round to 3 decimal places\n}\n\n/**\n * Calculate dew point based on temperature and humidity\n * @param {number} temperature - Temperature in Fahrenheit\n * @param {number} humidity - Relative humidity in percentage\n * @returns {number} Dew point in Fahrenheit\n */\nfunction calculateDewPoint(temperature, humidity) {\n  if (typeof temperature !== 'number' || isNaN(temperature)) {\n    throw new Error('Temperature must be a valid number');\n  }\n  if (typeof humidity !== 'number' || isNaN(humidity) || humidity < 0 || humidity > 100) {\n    throw new Error('Humidity must be a valid percentage between 0 and 100');\n  }\n  var a = 17.27;\n  var b = 237.7;\n  var alpha = a * temperature / (b + temperature) + Math.log(humidity / 100);\n  var dewPoint = b * alpha / (a - alpha);\n  return Math.round(dewPoint * 100) / 100; // Round to 2 decimal places\n}\n\n/**\n * Calculate vapor pressure based on temperature\n * @param {number} temperature - Temperature in Fahrenheit\n * @returns {number} Vapor pressure in inHg\n */\nfunction calculateVaporPressure(temperature) {\n  if (typeof temperature !== 'number' || isNaN(temperature)) {\n    throw new Error('Temperature must be a valid number');\n  }\n  var vaporPressure = 0.61078 * Math.exp(17.27 * temperature / (temperature + 237.3));\n  return Math.round(vaporPressure * 1000) / 1000; // Round to 3 decimal places\n}\n\n/**\n * Calculate air density effects based on temperature, pressure, humidity, and altitude\n * @param {number} temperature - Temperature in Fahrenheit\n * @param {number} pressure - Pressure in inHg\n * @param {number} humidity - Relative humidity in percentage\n * @param {number} altitude - Altitude in feet\n * @returns {Object} Air density effects\n */\nfunction calculateAirDensityEffects(temperature, pressure, humidity, altitude) {\n  var airDensity = calculateAirDensity(temperature, pressure);\n  var dewPoint = calculateDewPoint(temperature, humidity);\n  var vaporPressure = calculateVaporPressure(temperature);\n  return {\n    airDensity: airDensity,\n    dewPoint: dewPoint,\n    vaporPressure: vaporPressure,\n    altitude: altitude\n  };\n}\n\n//# sourceURL=webpack://golf-yardage-calculator/./src/calculations/air-density-calculations.js?");

/***/ }),

/***/ "./src/calculations/core-calculations.js":
/*!***********************************************!*\
  !*** ./src/calculations/core-calculations.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateAirDensityRatio: () => (/* binding */ calculateAirDensityRatio),\n/* harmony export */   calculateAltitudeEffect: () => (/* binding */ calculateAltitudeEffect),\n/* harmony export */   calculateWindEffect: () => (/* binding */ calculateWindEffect)\n/* harmony export */ });\n/**\r\n * Core calculation functions module containing all physics and adjustment calculations\r\n * @module core-calculations\r\n */\n\n/**\r\n * Calculate wind effect on shot distance and direction\r\n * @param {number} windSpeed - Wind speed in mph\r\n * @param {string} windDirection - Wind direction (N, S, E, W, NE, etc.)\r\n * @param {string} shotHeight - Shot trajectory height (low, medium, high)\r\n * @returns {Object} Distance and lateral effects\r\n */\nfunction calculateWindEffect(windSpeed, windDirection) {\n  var shotHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'medium';\n  // Input validation\n  if (typeof windSpeed !== 'number' || isNaN(windSpeed)) {\n    throw new Error('Shot distance must be a valid number');\n  }\n\n  // Height-specific adjustments\n  var heightMultipliers = {\n    'low': 0.65,\n    'medium': 1.0,\n    'high': 1.35\n  };\n\n  // Convert wind speed to number\n  var speed = Number(windSpeed);\n\n  // Get wind angle and calculate components\n  var angle = calculateWindAngle(windDirection);\n  var headwindComponent = Math.cos(angle * Math.PI / 180) * speed;\n  var crosswindComponent = Math.sin(angle * Math.PI / 180) * speed;\n\n  // Calculate base effects\n  var baseWindEffect = -0.0065; // Negative for headwind effect\n  var crosswindFactor = 0.0045;\n  var heightMultiplier = heightMultipliers[shotHeight] || 1.0;\n\n  // Calculate final effects\n  var distanceEffect = headwindComponent * baseWindEffect * heightMultiplier;\n  var lateralEffect = crosswindComponent * crosswindFactor * heightMultiplier;\n  return {\n    distanceEffect: distanceEffect,\n    lateralEffect: lateralEffect\n  };\n}\n\n/**\r\n * Calculate altitude effect on shot distance\r\n * @param {number} altitude - Altitude in feet\r\n * @returns {number} Altitude effect (multiplier)\r\n */\nfunction calculateAltitudeEffect() {\n  var altitude = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  if (altitude < 0) {\n    throw new Error('Altitude must be non-negative');\n  }\n\n  // Convert to number and handle invalid input\n  var alt = Number(altitude);\n  if (isNaN(alt)) {\n    return 1.0;\n  }\n\n  // Base effect: 2.2% per 1000ft\n  var baseEffect = alt / 1000 * 0.022;\n\n  // Progressive effect for higher altitudes\n  var progressiveEffect = 0;\n  if (alt > 5000) {\n    progressiveEffect = (alt - 5000) / 1000 * 0.001;\n  }\n  return 1 + baseEffect + progressiveEffect;\n}\n\n/**\r\n * Calculate air density ratio compared to sea level\r\n * @param {Object} conditions - Weather conditions\r\n * @returns {number} Air density ratio\r\n */\nfunction calculateAirDensityRatio(conditions) {\n  var standardTemp = 59;\n  var standardPressure = 29.92;\n  var standardHumidity = 50;\n  var tempRankine = (conditions.temp || standardTemp) + 459.67;\n  var standardTempRankine = standardTemp + 459.67;\n  var pressureRatio = Math.pow((conditions.pressure || standardPressure) / standardPressure, 0.45);\n  var temperatureRatio = Math.pow(standardTempRankine / tempRankine, 0.5);\n  var humidity = conditions.humidity || standardHumidity;\n  var humidityFactor = 1 - (humidity - standardHumidity) / 100 * 0.008;\n  var densityRatio = pressureRatio * temperatureRatio * humidityFactor;\n  return Math.round(densityRatio * 1000) / 1000;\n}\n\n/**\r\n * Helper function to calculate wind angle\r\n * @param {string} windDirection - Wind direction (N, S, E, W, NE, etc.)\r\n * @returns {number} Wind angle in degrees\r\n */\nfunction calculateWindAngle(windDirection) {\n  var directions = {\n    'N': 0,\n    'NNE': 22.5,\n    'NE': 45,\n    'ENE': 67.5,\n    'E': 90,\n    'ESE': 112.5,\n    'SE': 135,\n    'SSE': 157.5,\n    'S': 180,\n    'SSW': 202.5,\n    'SW': 225,\n    'WSW': 247.5,\n    'W': 270,\n    'WNW': 292.5,\n    'NW': 315,\n    'NNW': 337.5\n  };\n  return directions[windDirection] || 0;\n}\n\n//# sourceURL=webpack://golf-yardage-calculator/./src/calculations/core-calculations.js?");

/***/ }),

/***/ "./src/calculations/wind-calculations.js":
/*!***********************************************!*\
  !*** ./src/calculations/wind-calculations.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateEffectiveWindSpeed: () => (/* binding */ calculateEffectiveWindSpeed),\n/* harmony export */   calculateWindAngle: () => (/* binding */ calculateWindAngle),\n/* harmony export */   calculateWindEffect: () => (/* binding */ calculateWindEffect)\n/* harmony export */ });\n/**\n * Calculate wind effect on shot distance and direction\n * @param {number} windSpeed - Wind speed in mph\n * @param {number} windDirection - Wind direction in degrees\n * @param {number} shotDistance - Shot distance in yards\n * @param {number} shotHeight - Maximum shot height in yards\n * @returns {Object} Distance and lateral effects\n */\nfunction calculateWindEffect(windSpeed, windDirection, shotDistance, shotHeight) {\n  // Input validation\n  if (typeof windSpeed !== 'number' || isNaN(windSpeed)) {\n    throw new Error('Wind speed must be a valid number');\n  }\n  if (windSpeed < 0) {\n    throw new Error('Wind speed must be non-negative');\n  }\n  if (typeof windDirection !== 'number' || isNaN(windDirection)) {\n    throw new Error('Wind direction must be a valid number');\n  }\n  if (windDirection < 0 || windDirection > 360) {\n    throw new Error('Wind direction must be between 0 and 360 degrees');\n  }\n  if (typeof shotDistance !== 'number' || isNaN(shotDistance)) {\n    throw new Error('Shot distance must be a valid number');\n  }\n  if (shotDistance <= 0) {\n    throw new Error('Shot distance must be positive');\n  }\n  if (typeof shotHeight !== 'number' || isNaN(shotHeight)) {\n    throw new Error('Shot height must be a valid number');\n  }\n  if (shotHeight < 0) {\n    throw new Error('Shot height must be non-negative');\n  }\n\n  // Calculate wind components\n  var radians = windDirection * Math.PI / 180;\n  var headwind = windSpeed * Math.cos(radians);\n  var crosswind = windSpeed * Math.sin(radians);\n\n  // Height factor affects wind impact\n  var heightFactor = Math.min(1.5, Math.max(0.5, shotHeight / 30));\n\n  // Calculate effects with adjusted coefficients\n  var distance = -headwind * 0.009 * heightFactor; // Negative for headwind effect\n  var lateral = -crosswind * 0.008 * heightFactor; // Negative for leftward movement\n\n  // Handle zero cases\n  if (Math.abs(distance) < 1e-10) distance = 0;\n  if (Math.abs(lateral) < 1e-10) lateral = 0;\n  return {\n    distance: distance,\n    lateral: lateral\n  };\n}\n\n/**\n * Convert wind direction string to angle\n * @param {string} direction - Wind direction (N, S, E, W, NE, etc.)\n * @returns {number} Angle in degrees\n */\nfunction calculateWindAngle(direction) {\n  if (!direction || typeof direction !== 'string') {\n    return 0;\n  }\n  var directions = {\n    'N': 0,\n    'NNE': 22.5,\n    'NE': 45,\n    'ENE': 67.5,\n    'E': 90,\n    'ESE': 112.5,\n    'SE': 135,\n    'SSE': 157.5,\n    'S': 180,\n    'SSW': 202.5,\n    'SW': 225,\n    'WSW': 247.5,\n    'W': 270,\n    'WNW': 292.5,\n    'NW': 315,\n    'NNW': 337.5\n  };\n  return directions[direction.toUpperCase()] || 0;\n}\n\n/**\n * Calculate effective wind speed at altitude\n * @param {number} windSpeed - Wind speed in mph\n * @param {number} altitude - Altitude in feet\n * @returns {number} Effective wind speed\n */\nfunction calculateEffectiveWindSpeed(windSpeed, altitude) {\n  // Convert inputs to numbers\n  var speed = Number(windSpeed);\n  var alt = Number(altitude) || 0;\n\n  // Handle invalid inputs\n  if (isNaN(speed)) {\n    return 0;\n  }\n\n  // Handle negative wind speeds\n  var absSpeed = Math.abs(speed);\n\n  // Calculate altitude factor\n  var altitudeFactor = 1 + Math.min(20000, Math.max(0, alt)) / 66667;\n\n  // Calculate effective speed with altitude adjustment\n  var effectiveSpeed = absSpeed * altitudeFactor;\n\n  // Apply additional factor for negative altitudes\n  if (alt < 0) {\n    effectiveSpeed *= 1.015;\n  }\n\n  // Round to 2 decimal places\n  return Math.round(effectiveSpeed * 100) / 100;\n}\n\n//# sourceURL=webpack://golf-yardage-calculator/./src/calculations/wind-calculations.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _wind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wind.js */ \"./src/wind.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\n// Register service worker\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker.register('/service-worker.js').then(function (registration) {\n      console.log('ServiceWorker registration successful');\n    })[\"catch\"](function (err) {\n      console.log('ServiceWorker registration failed: ', err);\n    });\n  });\n}\n\n\n// Initialize web worker for calculations\nvar calculationWorker = new Worker('calculations-worker.js', {\n  type: 'module'\n});\nvar pendingCalculations = new Map();\nvar calculationCache = new Map();\n\n// Handle worker messages\ncalculationWorker.onmessage = function (e) {\n  var _e$data = e.data,\n    results = _e$data.results,\n    id = _e$data.id,\n    error = _e$data.error,\n    cached = _e$data.cached;\n  var callback = pendingCalculations.get(id);\n  if (callback) {\n    if (error) {\n      callback.reject(new Error(error));\n    } else {\n      // Update UI with loading state if not cached\n      if (!cached) {\n        updateLoadingState(false);\n      }\n      callback.resolve(results);\n    }\n    pendingCalculations[\"delete\"](id);\n  }\n};\n\n// Error handler for worker\ncalculationWorker.onerror = function (error) {\n  console.error('Worker error:', error);\n  updateLoadingState(false);\n  showErrorMessage('Calculation error occurred. Please try again.');\n};\n\n// Function to perform calculations using worker\nfunction calculateWithWorker(conditions) {\n  return new Promise(function (resolve, reject) {\n    var id = Date.now().toString();\n\n    // Show loading state\n    updateLoadingState(true);\n\n    // Store promise callbacks\n    pendingCalculations.set(id, {\n      resolve: resolve,\n      reject: reject\n    });\n\n    // Send calculation request to worker\n    calculationWorker.postMessage({\n      conditions: conditions,\n      id: id\n    });\n  });\n}\n\n// Update loading state\nfunction updateLoadingState(isLoading) {\n  var loadingIndicator = document.getElementById('loading-indicator');\n  if (loadingIndicator) {\n    loadingIndicator.style.display = isLoading ? 'block' : 'none';\n  }\n\n  // Disable inputs while loading\n  document.querySelectorAll('.input-field').forEach(function (input) {\n    input.disabled = isLoading;\n  });\n}\n\n// Cache DOM elements\nvar DOM = {\n  altitude: document.getElementById('altitude'),\n  humidity: document.getElementById('humidity'),\n  temperature: document.getElementById('temperature'),\n  windSpeed: document.getElementById('wind-speed'),\n  windDirection: document.getElementById('wind-direction'),\n  shotHeight: document.getElementById('shot-height'),\n  clubs: document.getElementById('clubs'),\n  environmentalEffect: document.getElementById('environmental-effect'),\n  shotChart: document.getElementById('shotChart'),\n  windDistanceEffect: document.getElementById('windDistanceEffect'),\n  windLateralEffect: document.getElementById('windLateralEffect'),\n  maxHeight: document.getElementById('maxHeight'),\n  landingAngle: document.getElementById('landingAngle'),\n  finalCarry: document.getElementById('finalCarry'),\n  finalTotal: document.getElementById('finalTotal'),\n  loadingIndicator: document.getElementById('loading-indicator')\n};\n\n// Initialize shot visualization chart\nvar shotChart;\nfunction initializeChart() {\n  if (!DOM.shotChart) return;\n  var ctx = DOM.shotChart.getContext('2d');\n  shotChart = new Chart(ctx, {\n    type: 'scatter',\n    data: {\n      datasets: [{\n        label: 'Shot Trajectory',\n        data: [],\n        borderColor: 'rgb(14, 165, 233)',\n        backgroundColor: 'rgba(14, 165, 233, 0.5)',\n        showLine: true,\n        tension: 0.4\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          type: 'linear',\n          position: 'bottom',\n          title: {\n            display: true,\n            text: 'Distance (yards)'\n          }\n        },\n        y: {\n          title: {\n            display: true,\n            text: 'Height (yards)'\n          }\n        }\n      }\n    }\n  });\n}\n\n// Update the UI when conditions change\nfunction updateCalculations() {\n  return _updateCalculations.apply(this, arguments);\n} // Update shot trajectory visualization\nfunction _updateCalculations() {\n  _updateCalculations = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    var conditions, results;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          if (validateInputs()) {\n            _context3.next = 2;\n            break;\n          }\n          return _context3.abrupt(\"return\");\n        case 2:\n          _context3.prev = 2;\n          conditions = {\n            temperature: parseFloat(DOM.temperature.value),\n            humidity: parseFloat(DOM.humidity.value),\n            altitude: parseFloat(DOM.altitude.value),\n            windSpeed: parseFloat(DOM.windSpeed.value),\n            windDirection: DOM.windDirection.value,\n            shotHeight: DOM.shotHeight.value\n          }; // Store current conditions in local storage\n          localStorage.setItem('lastConditions', JSON.stringify(conditions));\n\n          // Perform calculations in web worker\n          _context3.next = 7;\n          return calculateWithWorker(conditions);\n        case 7:\n          results = _context3.sent;\n          // Update UI with results\n          updateUI(results);\n          updateShotVisualization(results.trajectory);\n          updateEnvironmentalEffect(results);\n          _context3.next = 17;\n          break;\n        case 13:\n          _context3.prev = 13;\n          _context3.t0 = _context3[\"catch\"](2);\n          console.error('Calculation error:', _context3.t0);\n          showErrorMessage(_context3.t0.message);\n        case 17:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[2, 13]]);\n  }));\n  return _updateCalculations.apply(this, arguments);\n}\nfunction updateShotVisualization(trajectory) {\n  if (!shotChart) return;\n  shotChart.data.datasets[0].data = trajectory.points.map(function (point) {\n    return {\n      x: point.x,\n      y: point.y\n    };\n  });\n  shotChart.update();\n}\n\n// Update environmental effect display\nfunction updateEnvironmentalEffect(results) {\n  if (!DOM.environmentalEffect) return;\n  var percentChange = ((results.factor - 1) * 100).toFixed(1);\n  var direction = results.factor > 1 ? 'increase' : 'decrease';\n  var effectText = \"\\n        <div class=\\\"font-medium mb-2\\\">Environmental Effects:</div>\\n        <div class=\\\"grid grid-cols-2 gap-4\\\">\\n            <div>\\n                <h3 class=\\\"font-medium\\\">Conditions:</h3>\\n                <ul class=\\\"space-y-1\\\">\\n                    <li>Temperature: \".concat(results.components.temperature, \"\\xB0F</li>\\n                    <li>Humidity: \").concat(results.components.humidity, \"%</li>\\n                    <li>Altitude: \").concat(results.components.altitude, \"ft</li>\\n                    <li>Wind: \").concat(results.components.windSpeed, \"mph \").concat(results.components.windDirection, \"</li>\\n                </ul>\\n            </div>\\n            <div>\\n                <h3 class=\\\"font-medium\\\">Adjustments:</h3>\\n                <ul class=\\\"space-y-1\\\">\\n                    <li>Air Density: \").concat((results.components.airDensity * 100 - 100).toFixed(1), \"%</li>\\n                    <li>Wind Effect: \").concat((results.components.wind.distanceEffect * 100).toFixed(1), \"%</li>\\n                    <li>Total: \").concat(Math.abs(percentChange), \"% \").concat(direction, \"</li>\\n                </ul>\\n            </div>\\n        </div>\\n    \");\n  DOM.environmentalEffect.innerHTML = effectText;\n}\n\n// Update UI with calculation results\nfunction updateUI(results) {\n  if (!results) return;\n\n  // Update wind effects\n  if (DOM.windDistanceEffect) {\n    DOM.windDistanceEffect.textContent = \"\".concat(results.windEffect.distanceEffect > 0 ? '+' : '').concat((results.windEffect.distanceEffect * 100).toFixed(1), \"%\");\n  }\n  if (DOM.windLateralEffect) {\n    DOM.windLateralEffect.textContent = \"\".concat(results.windEffect.lateralEffect > 0 ? 'Right ' : 'Left ').concat(Math.abs(Math.round(results.carryDistance * results.windEffect.lateralEffect)), \" yards\");\n  }\n\n  // Update trajectory info\n  if (DOM.maxHeight) {\n    DOM.maxHeight.textContent = \"\".concat(Math.round(results.maxHeight), \" feet\");\n  }\n  if (DOM.landingAngle) {\n    DOM.landingAngle.textContent = \"\".concat(Math.round(results.landingAngle), \"\\xB0\");\n  }\n\n  // Update distances\n  if (DOM.finalCarry) {\n    DOM.finalCarry.textContent = \"\".concat(Math.round(results.carryDistance), \" yards\");\n  }\n  if (DOM.finalTotal) {\n    var totalDistance = Math.round(results.carryDistance * (1 + (results.rollout || 0)));\n    DOM.finalTotal.textContent = \"\".concat(totalDistance, \" yards\");\n  }\n}\n\n// Validate input values\nfunction validateInputs() {\n  var validators = {\n    temperature: {\n      min: -50,\n      max: 120,\n      message: 'Temperature must be between -50°F and 120°F'\n    },\n    humidity: {\n      min: 0,\n      max: 100,\n      message: 'Humidity must be between 0% and 100%'\n    },\n    altitude: {\n      min: -1000,\n      max: 15000,\n      message: 'Altitude must be between -1000ft and 15000ft'\n    },\n    windSpeed: {\n      min: 0,\n      max: 50,\n      message: 'Wind speed must be between 0mph and 50mph'\n    }\n  };\n  var isValid = true;\n  Object.entries(validators).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      field = _ref2[0],\n      rules = _ref2[1];\n    var element = DOM[field];\n    if (!element) return;\n    var value = parseFloat(element.value);\n    if (isNaN(value) || value < rules.min || value > rules.max) {\n      showErrorMessage(rules.message);\n      element.classList.add('error');\n      isValid = false;\n    } else {\n      element.classList.remove('error');\n    }\n  });\n  return isValid;\n}\n\n// Show error message\nfunction showErrorMessage(message) {\n  alert(message);\n}\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', function () {\n  initializeChart();\n  setupEventListeners();\n  loadLastConditions();\n\n  // Initialize wind calculator if on wind page\n  if (window.location.pathname.includes('wind.html')) {\n    new _wind_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  }\n  window.golfApp = new GolfApp();\n});\n\n// Set up event listeners\nfunction setupEventListeners() {\n  // Update calculations when inputs change\n  document.querySelectorAll('.input-field').forEach(function (input) {\n    input.addEventListener('change', debounce(updateCalculations, 500));\n  });\n\n  // Get weather button\n  var getWeatherBtn = document.getElementById('get-weather');\n  if (getWeatherBtn) {\n    getWeatherBtn.addEventListener('click', getCurrentWeather);\n  }\n}\n\n// Load last used conditions\nfunction loadLastConditions() {\n  var lastConditions = localStorage.getItem('lastConditions');\n  if (lastConditions) {\n    var conditions = JSON.parse(lastConditions);\n    Object.entries(conditions).forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        value = _ref4[1];\n      var element = DOM[key];\n      if (element) {\n        element.value = value;\n      }\n    });\n    updateCalculations();\n  }\n}\n\n// Debounce function\nfunction debounce(func, wait) {\n  var timeout;\n  return function executedFunction() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var later = function later() {\n      clearTimeout(timeout);\n      func.apply(void 0, args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\nvar GolfApp = /*#__PURE__*/function () {\n  function GolfApp() {\n    _classCallCheck(this, GolfApp);\n    this.clubs = [{\n      name: 'Driver',\n      distance: 260\n    }, {\n      name: '3-Wood',\n      distance: 230\n    }, {\n      name: '5-Wood',\n      distance: 210\n    }, {\n      name: '4-Iron',\n      distance: 190\n    }, {\n      name: '5-Iron',\n      distance: 180\n    }, {\n      name: '6-Iron',\n      distance: 170\n    }, {\n      name: '7-Iron',\n      distance: 160\n    }, {\n      name: '8-Iron',\n      distance: 150\n    }, {\n      name: '9-Iron',\n      distance: 140\n    }, {\n      name: 'PW',\n      distance: 130\n    }, {\n      name: 'GW',\n      distance: 120\n    }, {\n      name: 'SW',\n      distance: 110\n    }, {\n      name: 'LW',\n      distance: 90\n    }];\n    this.recentCalculations = [];\n    this.initializeApp();\n  }\n  return _createClass(GolfApp, [{\n    key: \"initializeApp\",\n    value: function initializeApp() {\n      this.renderClubs();\n      this.fetchWeather();\n      this.setupEventListeners();\n      this.loadRecentCalculations();\n    }\n  }, {\n    key: \"renderClubs\",\n    value: function renderClubs() {\n      var clubList = document.getElementById('club-list');\n      if (!clubList) return;\n      clubList.innerHTML = this.clubs.map(function (club) {\n        return \"\\n            <div class=\\\"flex justify-between items-center p-3 bg-gray-700/50 rounded-xl\\\">\\n                <span class=\\\"text-gray-200\\\">\".concat(club.name, \"</span>\\n                <span class=\\\"text-green-400\\\">\").concat(club.distance, \" yards</span>\\n            </div>\\n        \");\n      }).join('');\n    }\n  }, {\n    key: \"fetchWeather\",\n    value: function () {\n      var _fetchWeather = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var lat, lon, position, apiKey, response, data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              // Get user's location\n              lat = {\"TOMORROW_API_KEY\":\"jG9onLuVeiR4NWlVIO85EWWLCtQ2Uzqv\",\"WEATHER_API_KEY\":\"YOUR_OPENWEATHER_API_KEY\",\"DEFAULT_LAT\":\"37.7749\",\"DEFAULT_LON\":\"-122.4194\"}.DEFAULT_LAT;\n              lon = {\"TOMORROW_API_KEY\":\"jG9onLuVeiR4NWlVIO85EWWLCtQ2Uzqv\",\"WEATHER_API_KEY\":\"YOUR_OPENWEATHER_API_KEY\",\"DEFAULT_LAT\":\"37.7749\",\"DEFAULT_LON\":\"-122.4194\"}.DEFAULT_LON;\n              _context.prev = 3;\n              if (!navigator.geolocation) {\n                _context.next = 10;\n                break;\n              }\n              _context.next = 7;\n              return new Promise(function (resolve, reject) {\n                navigator.geolocation.getCurrentPosition(resolve, reject);\n              });\n            case 7:\n              position = _context.sent;\n              lat = position.coords.latitude;\n              lon = position.coords.longitude;\n            case 10:\n              _context.next = 15;\n              break;\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](3);\n              console.warn('Using default location:', _context.t0);\n            case 15:\n              apiKey = {\"TOMORROW_API_KEY\":\"jG9onLuVeiR4NWlVIO85EWWLCtQ2Uzqv\",\"WEATHER_API_KEY\":\"YOUR_OPENWEATHER_API_KEY\",\"DEFAULT_LAT\":\"37.7749\",\"DEFAULT_LON\":\"-122.4194\"}.WEATHER_API_KEY;\n              if (apiKey) {\n                _context.next = 18;\n                break;\n              }\n              throw new Error('Weather API key not configured');\n            case 18:\n              _context.next = 20;\n              return fetch(\"https://api.openweathermap.org/data/2.5/weather?lat=\".concat(lat, \"&lon=\").concat(lon, \"&appid=\").concat(apiKey, \"&units=imperial\"));\n            case 20:\n              response = _context.sent;\n              if (response.ok) {\n                _context.next = 23;\n                break;\n              }\n              throw new Error('Weather data fetch failed');\n            case 23:\n              _context.next = 25;\n              return response.json();\n            case 25:\n              data = _context.sent;\n              this.updateWeatherDisplay(data);\n              _context.next = 33;\n              break;\n            case 29:\n              _context.prev = 29;\n              _context.t1 = _context[\"catch\"](0);\n              console.error('Error fetching weather:', _context.t1);\n              this.updateWithMockWeather();\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 29], [3, 12]]);\n      }));\n      function fetchWeather() {\n        return _fetchWeather.apply(this, arguments);\n      }\n      return fetchWeather;\n    }()\n  }, {\n    key: \"updateWeatherDisplay\",\n    value: function updateWeatherDisplay(data) {\n      // Update current wind preview\n      var currentWind = document.getElementById('current-wind');\n      if (currentWind) {\n        currentWind.textContent = \"\".concat(Math.round(data.wind.speed), \" mph \").concat(this.getWindDirection(data.wind.deg));\n      }\n\n      // Update detailed weather info\n      var temperature = document.getElementById('temperature');\n      var wind = document.getElementById('wind');\n      var humidity = document.getElementById('humidity');\n      var pressure = document.getElementById('pressure');\n      if (temperature) temperature.textContent = \"\".concat(Math.round(data.main.temp), \"\\xB0F\");\n      if (wind) wind.textContent = \"\".concat(Math.round(data.wind.speed), \" mph\");\n      if (humidity) humidity.textContent = \"\".concat(data.main.humidity, \"%\");\n      if (pressure) pressure.textContent = \"\".concat(data.main.pressure, \" hPa\");\n    }\n  }, {\n    key: \"updateWithMockWeather\",\n    value: function updateWithMockWeather() {\n      var mockData = {\n        main: {\n          temp: 72,\n          humidity: 65,\n          pressure: 1013\n        },\n        wind: {\n          speed: 10,\n          deg: 45\n        }\n      };\n      this.updateWeatherDisplay(mockData);\n    }\n  }, {\n    key: \"getWindDirection\",\n    value: function getWindDirection(degrees) {\n      var directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];\n      var index = Math.round(degrees % 360 / 22.5) % 16;\n      return directions[index];\n    }\n  }, {\n    key: \"addClub\",\n    value: function addClub() {\n      var name = prompt('Enter club name:');\n      var distance = parseInt(prompt('Enter typical distance (yards):'));\n      if (name && !isNaN(distance)) {\n        this.clubs.push({\n          name: name,\n          distance: distance\n        });\n        this.renderClubs();\n        this.saveClubs();\n      }\n    }\n  }, {\n    key: \"saveClubs\",\n    value: function saveClubs() {\n      localStorage.setItem('golfClubs', JSON.stringify(this.clubs));\n    }\n  }, {\n    key: \"loadClubs\",\n    value: function loadClubs() {\n      var saved = localStorage.getItem('golfClubs');\n      if (saved) {\n        this.clubs = JSON.parse(saved);\n        this.renderClubs();\n      }\n    }\n  }, {\n    key: \"addRecentCalculation\",\n    value: function addRecentCalculation(calculation) {\n      this.recentCalculations.unshift(calculation);\n      if (this.recentCalculations.length > 5) {\n        this.recentCalculations.pop();\n      }\n      this.renderRecentCalculations();\n      this.saveRecentCalculations();\n    }\n  }, {\n    key: \"renderRecentCalculations\",\n    value: function renderRecentCalculations() {\n      var recentCalcs = document.getElementById('recent-calcs');\n      if (!recentCalcs) return;\n      recentCalcs.innerHTML = this.recentCalculations.length ? this.recentCalculations.map(function (calc) {\n        return \"\\n                <div class=\\\"flex justify-between items-center p-4 bg-gray-700/50 rounded-xl\\\">\\n                    <div>\\n                        <div class=\\\"text-white\\\">\".concat(calc.club, \" \\u2022 \").concat(calc.distance, \" yards</div>\\n                        <div class=\\\"text-sm text-gray-400\\\">Wind: \").concat(calc.wind, \" mph \").concat(calc.direction, \"</div>\\n                    </div>\\n                    <div class=\\\"text-green-400\\\">\").concat(calc.adjustment, \"</div>\\n                </div>\\n            \");\n      }).join('') : '<div class=\"text-gray-400 text-center p-4\">No recent calculations</div>';\n    }\n  }, {\n    key: \"saveRecentCalculations\",\n    value: function saveRecentCalculations() {\n      localStorage.setItem('recentCalculations', JSON.stringify(this.recentCalculations));\n    }\n  }, {\n    key: \"loadRecentCalculations\",\n    value: function loadRecentCalculations() {\n      var saved = localStorage.getItem('recentCalculations');\n      if (saved) {\n        this.recentCalculations = JSON.parse(saved);\n        this.renderRecentCalculations();\n      }\n    }\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this = this;\n      // Add club button\n      window.addClub = function () {\n        return _this.addClub();\n      };\n\n      // Refresh weather button\n      window.refreshWeather = function () {\n        return _this.fetchWeather();\n      };\n    }\n  }]);\n}(); // Weather functionality\ndocument.addEventListener('DOMContentLoaded', function () {\n  var weatherButton = document.getElementById('get-weather');\n  var weatherDisplay = document.getElementById('weather-display');\n  var lastUpdated = document.getElementById('last-updated');\n  var tempDisplay = document.getElementById('temperature');\n  var windDisplay = document.getElementById('wind');\n  var humidityDisplay = document.getElementById('humidity');\n  var pressureDisplay = document.getElementById('pressure');\n\n  // Error handling function\n  function showErrorMessage(message) {\n    alert(message);\n  }\n  function saveWeatherData(data) {\n    var weatherData = {\n      data: data,\n      timestamp: new Date().getTime(),\n      expiresIn: 30 * 60 * 1000 // 30 minutes in milliseconds\n    };\n    localStorage.setItem('weatherData', JSON.stringify(weatherData));\n  }\n  function getStoredWeatherData() {\n    var storedData = localStorage.getItem('weatherData');\n    if (!storedData) return null;\n    var weatherData = JSON.parse(storedData);\n    var now = new Date().getTime();\n    var isExpired = now - weatherData.timestamp > weatherData.expiresIn;\n    if (isExpired) {\n      localStorage.removeItem('weatherData');\n      return null;\n    }\n    return weatherData.data;\n  }\n  function updateWeatherDisplay(data) {\n    tempDisplay.textContent = \"\".concat(Math.round(data.values.temperature), \"\\xB0F\");\n    windDisplay.textContent = \"\".concat(Math.round(data.values.windSpeed), \" mph \").concat(getWindDirection(data.values.windDirection));\n    humidityDisplay.textContent = \"\".concat(Math.round(data.values.humidity), \"%\");\n    pressureDisplay.textContent = \"\".concat(Math.round(data.values.pressureSurfaceLevel), \" hPa\");\n    weatherDisplay.classList.remove('hidden');\n    var timestamp = new Date(data.time || new Date()).toLocaleTimeString();\n    lastUpdated.textContent = \"Updated \".concat(timestamp);\n  }\n  function getWeather() {\n    return _getWeather.apply(this, arguments);\n  }\n  function _getWeather() {\n    _getWeather = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var _cachedData, position, _position$coords, latitude, longitude, url, response, errorText, data;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            // Check for cached weather data first\n            _cachedData = getStoredWeatherData();\n            if (!_cachedData) {\n              _context2.next = 6;\n              break;\n            }\n            console.log('Using cached weather data');\n            updateWeatherDisplay(_cachedData);\n            return _context2.abrupt(\"return\");\n          case 6:\n            weatherButton.disabled = true;\n            weatherButton.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Loading...';\n\n            // Get the user's location\n            _context2.next = 10;\n            return new Promise(function (resolve, reject) {\n              navigator.geolocation.getCurrentPosition(resolve, reject);\n            });\n          case 10:\n            position = _context2.sent;\n            _position$coords = position.coords, latitude = _position$coords.latitude, longitude = _position$coords.longitude;\n            console.log('Location:', {\n              latitude: latitude,\n              longitude: longitude\n            });\n\n            // Call Tomorrow.io API\n            url = \"https://api.tomorrow.io/v4/weather/realtime?location=\".concat(latitude, \",\").concat(longitude, \"&units=imperial&apikey=jG9onLuVeiR4NWlVIO85EWWLCtQ2Uzqv\");\n            console.log('API URL:', url);\n            _context2.next = 17;\n            return fetch(url);\n          case 17:\n            response = _context2.sent;\n            console.log('Response status:', response.status);\n            if (response.ok) {\n              _context2.next = 25;\n              break;\n            }\n            _context2.next = 22;\n            return response.text();\n          case 22:\n            errorText = _context2.sent;\n            console.error('API Error:', errorText);\n            throw new Error(\"Weather API request failed: \".concat(response.status, \" \").concat(errorText));\n          case 25:\n            _context2.next = 27;\n            return response.json();\n          case 27:\n            data = _context2.sent;\n            console.log('API Response:', data);\n\n            // Save the weather data\n            saveWeatherData(data.data);\n\n            // Update display\n            updateWeatherDisplay(data.data);\n            _context2.next = 37;\n            break;\n          case 33:\n            _context2.prev = 33;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error('Detailed error:', _context2.t0);\n            showErrorMessage(\"Unable to fetch weather data: \".concat(_context2.t0.message));\n          case 37:\n            _context2.prev = 37;\n            weatherButton.disabled = false;\n            weatherButton.innerHTML = '<i class=\"fas fa-location-arrow\"></i> Get Current Weather';\n            return _context2.finish(37);\n          case 41:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[0, 33, 37, 41]]);\n    }));\n    return _getWeather.apply(this, arguments);\n  }\n  function getWindDirection(degrees) {\n    var directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];\n    var index = Math.round(degrees / 22.5) % 16;\n    return directions[index];\n  }\n\n  // Event listeners\n  if (weatherButton) {\n    weatherButton.addEventListener('click', getWeather);\n\n    // Check for cached weather data on page load\n    var cachedData = getStoredWeatherData();\n    if (cachedData) {\n      updateWeatherDisplay(cachedData);\n    }\n  }\n});\n\n//# sourceURL=webpack://golf-yardage-calculator/./src/main.js?");

/***/ }),

/***/ "./src/wind.js":
/*!*********************!*\
  !*** ./src/wind.js ***!
  \*********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _calculations_wind_calculations_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculations/wind-calculations.js */ \"./src/calculations/wind-calculations.js\");\n/* harmony import */ var _calculations_air_density_calculations_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calculations/air-density-calculations.js */ \"./src/calculations/air-density-calculations.js\");\n/* harmony import */ var _calculations_core_calculations_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculations/core-calculations.js */ \"./src/calculations/core-calculations.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// Wind calculation and UI handling\n\n\n\nvar WindCalculator = /*#__PURE__*/function () {\n  function WindCalculator() {\n    _classCallCheck(this, WindCalculator);\n    console.log('Initializing WindCalculator...');\n    this.initializeElements();\n    this.setupChart();\n    this.setupEventListeners();\n    this.fetchWeatherData();\n  }\n  return _createClass(WindCalculator, [{\n    key: \"initializeElements\",\n    value: function initializeElements() {\n      console.log('Initializing elements...');\n      // Input elements\n      this.windSpeedInput = document.getElementById('wind-speed');\n      this.windAngleInput = document.getElementById('wind-angle');\n      this.shotDistanceInput = document.getElementById('shot-distance');\n      this.shotHeightInput = document.getElementById('shot-height');\n      this.shotDirectionInput = document.getElementById('shot-direction');\n\n      // Display elements\n      this.windSpeedDisplay = document.getElementById('current-wind-speed');\n      this.windDirectionDisplay = document.getElementById('current-wind-direction');\n      this.lastUpdatedDisplay = document.getElementById('last-updated');\n      this.adjustedDistanceDisplay = document.getElementById('adjusted-distance');\n      this.distanceEffectDisplay = document.getElementById('distance-effect');\n      this.tempEffectDisplay = document.getElementById('temp-effect');\n      this.lateralEffectDisplay = document.getElementById('lateral-effect');\n\n      // Canvas element\n      this.canvas = document.getElementById('shot-chart');\n      if (!this.canvas) {\n        console.error('Shot chart canvas not found');\n        return;\n      }\n      this.ctx = this.canvas.getContext('2d');\n\n      // Log element states\n      console.log('Elements initialized:', {\n        windSpeedInput: !!this.windSpeedInput,\n        windAngleInput: !!this.windAngleInput,\n        shotDistanceInput: !!this.shotDistanceInput,\n        shotHeightInput: !!this.shotHeightInput,\n        shotDirectionInput: !!this.shotDirectionInput,\n        canvas: !!this.canvas\n      });\n    }\n  }, {\n    key: \"setupChart\",\n    value: function setupChart() {\n      if (!this.ctx) {\n        console.error('Chart context not available');\n        return;\n      }\n\n      // Set canvas size\n      this.canvas.width = 400;\n      this.canvas.height = 400;\n\n      // Initial draw\n      this.drawChart();\n    }\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this = this;\n      console.log('Setting up event listeners...');\n      // Add input event listeners\n      var inputs = [this.windSpeedInput, this.windAngleInput, this.shotDistanceInput, this.shotHeightInput, this.shotDirectionInput];\n      inputs.forEach(function (input, index) {\n        if (input) {\n          input.addEventListener('input', function () {\n            console.log(\"Input changed: \".concat(input.id));\n            _this.handleWindChange();\n          });\n        } else {\n          console.error(\"Input element at index \".concat(index, \" not found\"));\n        }\n      });\n\n      // Add refresh button listener\n      var refreshButton = document.getElementById('refresh-weather');\n      if (refreshButton) {\n        refreshButton.addEventListener('click', function () {\n          console.log('Refresh button clicked');\n          _this.fetchWeatherData();\n        });\n      } else {\n        console.error('Refresh button not found');\n      }\n    }\n  }, {\n    key: \"drawChart\",\n    value: function drawChart() {\n      if (!this.ctx) return;\n\n      // Clear canvas\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // Draw compass circle\n      this.ctx.beginPath();\n      this.ctx.arc(200, 200, 180, 0, 2 * Math.PI);\n      this.ctx.strokeStyle = '#ccc';\n      this.ctx.stroke();\n\n      // Draw compass points\n      this.drawCompassPoint('N', 200, 20);\n      this.drawCompassPoint('E', 380, 200);\n      this.drawCompassPoint('S', 200, 380);\n      this.drawCompassPoint('W', 20, 200);\n\n      // Draw wind vector if we have data\n      if (this.windSpeedInput && this.windAngleInput) {\n        var windSpeed = parseFloat(this.windSpeedInput.value) || 0;\n        var windAngle = parseFloat(this.windAngleInput.value) || 0;\n        this.drawWindVector(windSpeed, windAngle);\n      }\n\n      // Draw shot vector if we have data\n      if (this.shotDistanceInput && this.shotDirectionInput) {\n        var shotDistance = parseFloat(this.shotDistanceInput.value) || 0;\n        var shotDirection = parseFloat(this.shotDirectionInput.value) || 0;\n        this.drawShotVector(shotDistance, shotDirection);\n      }\n    }\n  }, {\n    key: \"drawCompassPoint\",\n    value: function drawCompassPoint(label, x, y) {\n      if (!this.ctx) return;\n      this.ctx.font = '14px Arial';\n      this.ctx.fillStyle = '#666';\n      this.ctx.textAlign = 'center';\n      this.ctx.textBaseline = 'middle';\n      this.ctx.fillText(label, x, y);\n    }\n  }, {\n    key: \"drawWindVector\",\n    value: function drawWindVector(speed, angle) {\n      if (!this.ctx) return;\n      console.log('Drawing wind vector:', {\n        speed: speed,\n        angle: angle\n      });\n      var radians = (angle - 90) * (Math.PI / 180);\n      var length = Math.min(speed * 5, 150);\n      var startX = 200;\n      var startY = 200;\n      var endX = startX + length * Math.cos(radians);\n      var endY = startY + length * Math.sin(radians);\n\n      // Draw arrow line\n      this.ctx.beginPath();\n      this.ctx.moveTo(startX, startY);\n      this.ctx.lineTo(endX, endY);\n      this.ctx.strokeStyle = 'blue';\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n\n      // Draw arrow head\n      var headLength = 10;\n      var angle1 = radians - Math.PI / 6;\n      var angle2 = radians + Math.PI / 6;\n      this.ctx.beginPath();\n      this.ctx.moveTo(endX, endY);\n      this.ctx.lineTo(endX - headLength * Math.cos(angle1), endY - headLength * Math.sin(angle1));\n      this.ctx.moveTo(endX, endY);\n      this.ctx.lineTo(endX - headLength * Math.cos(angle2), endY - headLength * Math.sin(angle2));\n      this.ctx.stroke();\n    }\n  }, {\n    key: \"drawShotVector\",\n    value: function drawShotVector(distance, direction) {\n      if (!this.ctx) return;\n      console.log('Drawing shot vector:', {\n        distance: distance,\n        direction: direction\n      });\n      var radians = (direction - 90) * (Math.PI / 180);\n      var length = Math.min(distance / 2, 150);\n      var startX = 200;\n      var startY = 200;\n      var endX = startX + length * Math.cos(radians);\n      var endY = startY + length * Math.sin(radians);\n\n      // Draw arrow line\n      this.ctx.beginPath();\n      this.ctx.moveTo(startX, startY);\n      this.ctx.lineTo(endX, endY);\n      this.ctx.strokeStyle = 'red';\n      this.ctx.lineWidth = 2;\n      this.ctx.stroke();\n\n      // Draw arrow head\n      var headLength = 10;\n      var angle1 = radians - Math.PI / 6;\n      var angle2 = radians + Math.PI / 6;\n      this.ctx.beginPath();\n      this.ctx.moveTo(endX, endY);\n      this.ctx.lineTo(endX - headLength * Math.cos(angle1), endY - headLength * Math.sin(angle1));\n      this.ctx.moveTo(endX, endY);\n      this.ctx.lineTo(endX - headLength * Math.cos(angle2), endY - headLength * Math.sin(angle2));\n      this.ctx.stroke();\n    }\n  }, {\n    key: \"updateShotPath\",\n    value: function updateShotPath() {\n      var _this$windSpeedInput, _this$windAngleInput, _this$shotDistanceInp, _this$shotHeightInput, _this$shotDirectionIn, _weatherData$values, _weatherData$values2, _weatherData$values3, _weatherData$values4;\n      console.log('Updating shot path...');\n      if (!this.ctx) {\n        console.error('Chart not initialized');\n        return;\n      }\n\n      // Get input values\n      var windSpeed = parseFloat((_this$windSpeedInput = this.windSpeedInput) === null || _this$windSpeedInput === void 0 ? void 0 : _this$windSpeedInput.value) || 0;\n      var windDirection = parseFloat((_this$windAngleInput = this.windAngleInput) === null || _this$windAngleInput === void 0 ? void 0 : _this$windAngleInput.value) || 0;\n      var shotDistance = parseFloat((_this$shotDistanceInp = this.shotDistanceInput) === null || _this$shotDistanceInp === void 0 ? void 0 : _this$shotDistanceInp.value) || 0;\n      var shotHeight = parseFloat((_this$shotHeightInput = this.shotHeightInput) === null || _this$shotHeightInput === void 0 ? void 0 : _this$shotHeightInput.value) || 0;\n      var shotDirection = parseFloat((_this$shotDirectionIn = this.shotDirectionInput) === null || _this$shotDirectionIn === void 0 ? void 0 : _this$shotDirectionIn.value) || 0;\n      console.log('Input values:', {\n        windSpeed: windSpeed,\n        windDirection: windDirection,\n        shotDistance: shotDistance,\n        shotHeight: shotHeight,\n        shotDirection: shotDirection\n      });\n\n      // Get weather data from cache if available\n      var weatherData = this.getCachedWeather();\n      var temperature = (weatherData === null || weatherData === void 0 || (_weatherData$values = weatherData.values) === null || _weatherData$values === void 0 ? void 0 : _weatherData$values.temperature) || 70;\n      var pressure = (weatherData === null || weatherData === void 0 || (_weatherData$values2 = weatherData.values) === null || _weatherData$values2 === void 0 ? void 0 : _weatherData$values2.pressureSeaLevel) || 29.92;\n      var humidity = (weatherData === null || weatherData === void 0 || (_weatherData$values3 = weatherData.values) === null || _weatherData$values3 === void 0 ? void 0 : _weatherData$values3.humidity) || 0;\n      var altitude = (weatherData === null || weatherData === void 0 || (_weatherData$values4 = weatherData.values) === null || _weatherData$values4 === void 0 ? void 0 : _weatherData$values4.altitude) || 0;\n\n      // Calculate wind effects\n      var windEffects = (0,_calculations_wind_calculations_js__WEBPACK_IMPORTED_MODULE_0__.calculateWindEffect)(windSpeed, windDirection, shotDistance, shotHeight);\n\n      // Calculate air density effects\n      var airDensity = (0,_calculations_air_density_calculations_js__WEBPACK_IMPORTED_MODULE_1__.calculateAirDensity)(temperature, pressure, humidity);\n\n      // Calculate altitude effects\n      var altitudeEffects = (0,_calculations_core_calculations_js__WEBPACK_IMPORTED_MODULE_2__.calculateAltitudeEffect)(altitude);\n\n      // Calculate total effects\n      var windDistanceEffect = windEffects.distance * shotDistance;\n      var lateralEffect = windEffects.lateral * shotDistance;\n      var airDensityEffect = (airDensity - 1) * shotDistance;\n      var altitudeEffect = (altitudeEffects.total - 1) * shotDistance;\n\n      // Calculate final adjusted distance\n      var adjustedDistance = Math.round(shotDistance + windDistanceEffect + airDensityEffect + altitudeEffect);\n\n      // Update displays\n      if (this.adjustedDistanceDisplay) {\n        this.adjustedDistanceDisplay.textContent = \"\".concat(adjustedDistance, \" yards\");\n      }\n      if (this.distanceEffectDisplay) {\n        this.distanceEffectDisplay.textContent = \"\".concat(Math.round(windDistanceEffect), \" yards\");\n      }\n      if (this.tempEffectDisplay) {\n        this.tempEffectDisplay.textContent = \"\".concat(Math.round(airDensityEffect + altitudeEffect), \" yards\");\n      }\n      if (this.lateralEffectDisplay) {\n        var lateralEffectText = lateralEffect > 0 ? 'right' : 'left';\n        this.lateralEffectDisplay.textContent = \"\".concat(Math.round(lateralEffect), \" yards \").concat(lateralEffectText);\n      }\n\n      // Redraw chart\n      this.drawChart();\n    }\n  }, {\n    key: \"fetchWeatherData\",\n    value: function () {\n      var _fetchWeatherData = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var cachedData, weatherData, now, isExpired, _data, position, _position$coords, latitude, longitude, url, response, data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              console.log('Fetching weather data...');\n              // Check for cached weather data first\n              cachedData = localStorage.getItem('weatherData');\n              if (!cachedData) {\n                _context.next = 18;\n                break;\n              }\n              weatherData = JSON.parse(cachedData);\n              now = new Date().getTime();\n              isExpired = now - weatherData.timestamp > weatherData.expiresIn;\n              if (isExpired) {\n                _context.next = 18;\n                break;\n              }\n              console.log('Using cached weather data for wind calculations');\n              _data = weatherData.data; // Update UI with weather data\n              if (this.windSpeedInput) this.windSpeedInput.value = Math.round(_data.values.windSpeed);\n              if (this.windAngleInput) this.windAngleInput.value = _data.values.windDirection;\n              if (this.windSpeedDisplay) this.windSpeedDisplay.textContent = \"\".concat(Math.round(_data.values.windSpeed), \" mph\");\n              if (this.windDirectionDisplay) this.windDirectionDisplay.textContent = this.getDirectionLabel(_data.values.windDirection);\n              if (this.lastUpdatedDisplay) this.lastUpdatedDisplay.textContent = \"Updated: \".concat(new Date(weatherData.timestamp).toLocaleTimeString());\n\n              // Store temperature for later use\n              this.currentTemperature = _data.values.temperature;\n\n              // Update calculations\n              this.handleWindChange();\n              return _context.abrupt(\"return\");\n            case 18:\n              _context.next = 20;\n              return new Promise(function (resolve, reject) {\n                navigator.geolocation.getCurrentPosition(resolve, reject);\n              });\n            case 20:\n              position = _context.sent;\n              _position$coords = position.coords, latitude = _position$coords.latitude, longitude = _position$coords.longitude;\n              url = \"https://api.tomorrow.io/v4/weather/realtime?location=\".concat(latitude, \",\").concat(longitude, \"&units=imperial&apikey=jG9onLuVeiR4NWlVIO85EWWLCtQ2Uzqv\");\n              _context.next = 25;\n              return fetch(url);\n            case 25:\n              response = _context.sent;\n              if (response.ok) {\n                _context.next = 28;\n                break;\n              }\n              throw new Error('Weather data fetch failed');\n            case 28:\n              _context.next = 30;\n              return response.json();\n            case 30:\n              data = _context.sent;\n              console.log('Weather data fetched:', data);\n\n              // Update UI with weather data\n              if (this.windSpeedInput) this.windSpeedInput.value = Math.round(data.data.values.windSpeed);\n              if (this.windAngleInput) this.windAngleInput.value = data.data.values.windDirection;\n              if (this.windSpeedDisplay) this.windSpeedDisplay.textContent = \"\".concat(Math.round(data.data.values.windSpeed), \" mph\");\n              if (this.windDirectionDisplay) this.windDirectionDisplay.textContent = this.getDirectionLabel(data.data.values.windDirection);\n              if (this.lastUpdatedDisplay) this.lastUpdatedDisplay.textContent = \"Updated: \".concat(new Date().toLocaleTimeString());\n\n              // Store temperature for later use\n              this.currentTemperature = data.data.values.temperature;\n\n              // Update calculations\n              this.handleWindChange();\n              _context.next = 45;\n              break;\n            case 41:\n              _context.prev = 41;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching weather data:', _context.t0);\n              this.updateWithMockData();\n            case 45:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 41]]);\n      }));\n      function fetchWeatherData() {\n        return _fetchWeatherData.apply(this, arguments);\n      }\n      return fetchWeatherData;\n    }()\n  }, {\n    key: \"updateWithMockData\",\n    value: function updateWithMockData() {\n      console.log('Using mock data...');\n      // Mock data for testing\n      var mockWindSpeed = 10;\n      var mockWindDirection = 45;\n      this.currentTemperature = 70; // Default temperature\n\n      if (this.windSpeedInput) this.windSpeedInput.value = mockWindSpeed;\n      if (this.windAngleInput) this.windAngleInput.value = mockWindDirection;\n      if (this.windSpeedDisplay) this.windSpeedDisplay.textContent = \"\".concat(mockWindSpeed, \" mph\");\n      if (this.windDirectionDisplay) this.windDirectionDisplay.textContent = this.getDirectionLabel(mockWindDirection);\n      if (this.lastUpdatedDisplay) this.lastUpdatedDisplay.textContent = 'Using mock data';\n\n      // Update calculations with mock data\n      this.handleWindChange();\n    }\n  }, {\n    key: \"getCachedWeather\",\n    value: function getCachedWeather() {\n      try {\n        var cachedData = localStorage.getItem('weatherData');\n        if (!cachedData) {\n          console.log('No cached weather data found');\n          return null;\n        }\n        var _JSON$parse = JSON.parse(cachedData),\n          data = _JSON$parse.data,\n          timestamp = _JSON$parse.timestamp;\n        var cacheAge = Date.now() - timestamp;\n        var cacheTimeout = 30 * 60 * 1000; // 30 minutes\n\n        if (cacheAge >= cacheTimeout) {\n          console.log('Weather cache expired:', {\n            cacheAge: Math.round(cacheAge / 1000 / 60) + ' minutes',\n            timeout: Math.round(cacheTimeout / 1000 / 60) + ' minutes'\n          });\n          localStorage.removeItem('weatherData');\n          return null;\n        }\n        console.log('Using cached weather data:', {\n          data: data,\n          cacheAge: Math.round(cacheAge / 1000 / 60) + ' minutes',\n          expiresIn: Math.round((cacheTimeout - cacheAge) / 1000 / 60) + ' minutes'\n        });\n        return data;\n      } catch (error) {\n        console.error('Error reading weather cache:', error);\n        localStorage.removeItem('weatherData');\n        return null;\n      }\n    }\n  }, {\n    key: \"getDirectionLabel\",\n    value: function getDirectionLabel(degrees) {\n      var directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];\n      var index = Math.round(degrees / 22.5) % 16;\n      return directions[index];\n    }\n  }, {\n    key: \"handleWindChange\",\n    value: function handleWindChange() {\n      console.log('Wind changed, updating shot path...');\n      this.updateShotPath();\n    }\n  }]);\n}(); // Initialize the calculator when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('DOM loaded, initializing WindCalculator...');\n  new WindCalculator();\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WindCalculator);\n\n//# sourceURL=webpack://golf-yardage-calculator/./src/wind.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.js");
/******/ 	
/******/ })()
;